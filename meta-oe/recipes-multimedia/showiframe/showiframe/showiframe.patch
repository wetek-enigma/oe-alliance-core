diff -Naur a/showiframe.c b/showiframe.c
--- a/showiframe.c	2015-08-10 14:30:58.000000000 +0200
+++ b/showiframe.c	2015-08-10 14:23:08.000000000 +0200
@@ -8,18 +8,41 @@
 #include <sys/stat.h>
 #include <unistd.h>
 #include <errno.h>
+#include <codec.h>
 
-#include <linux/dvb/video.h>
+static codec_para_t v_codec_para;
+static codec_para_t *pcodec, *vpcodec;
+		
+int blackout_policy(char *path,int cmd)
+{
+    int fd;
+    char  bcmd[16];
+    fd = open(path, O_CREAT|O_RDWR | O_TRUNC, 0644);
+
+    if(fd>=0) {
+        sprintf(bcmd,"%d",cmd);
+        write(fd,bcmd,strlen(bcmd));
+        close(fd);
+        return 0;
+    }
 
-void c(int a)
+    return -1;
+}
+int set_tsync_enable(int enable)
 {
-	if (a < 0)
-	{
-		perror("ioctl");
-		exit(6);
-	}
+    int fd;
+    char *path = "/sys/class/tsync/enable";
+    char  bcmd[16];
+    fd = open(path, O_CREAT | O_RDWR | O_TRUNC, 0644);
+    if (fd >= 0) {
+        sprintf(bcmd, "%d", enable);
+        write(fd, bcmd, strlen(bcmd));
+        close(fd);
+        return 0;
+    }
+    
+    return -1;
 }
-
 ssize_t write_all(int fd, const void *buf, size_t count)
 {
 	int retval;
@@ -27,7 +50,7 @@
 	size_t handledcount = 0;
 	while (handledcount < count)
 	{
-		retval = write(fd, &ptr[handledcount], count - handledcount);
+		retval = codec_write(pcodec, &ptr[handledcount], count - handledcount);
 
 		if (retval == 0) return -1;
 		if (retval < 0)
@@ -42,6 +65,8 @@
 
 int main(int argc, char **argv)
 {
+	int fd = 0;
+	int ret;
 	struct stat s;
 	if (argc != 2)
 	{
@@ -49,27 +74,39 @@
 		return 3;
 	}
 
+	blackout_policy("/sys/class/video/blackout_policy", 0); //keep video frame on TV even when app exit, dont black it
+		
+	vpcodec = &v_codec_para;
+	memset(vpcodec, 0, sizeof(codec_para_t ));
+	vpcodec->has_video = 1;		
+	vpcodec->stream_type = STREAM_TYPE_ES_VIDEO;
+	vpcodec->has_audio = 0;
+	vpcodec->noblock = 0;
+		
+	ret = codec_init(vpcodec);
+    if(ret != CODEC_ERROR_NONE)
+        return 5;
+
+    set_tsync_enable(0);
+
+    pcodec = vpcodec;
+	
 	int f = open(argv[1], O_RDONLY);
 	if (f < 0)
 	{
 		perror(argv[1]);
+		codec_close(vpcodec);
 		return 4;
 	}
 	fstat(f, &s);
-
-	int fd = open("/dev/dvb/adapter0/video0", O_WRONLY|O_NONBLOCK);
-
-	if (fd <= 0)
-	{
-		perror("/dev/dvb/adapter0/video0");
-		return 2;
-	}
-	else if (fork() != 0)
+	
+	if (fork() != 0)
 		return 0;
 	else
-	{
+	{	
 		size_t pos=0;
 		int seq_end_avail = 0;
+		struct buf_status vbuf;
 
 		int count = 7;
 		/* 0x0 0x0 0x1 0xffffffe0 0x10 0x8 0xffffff80 0xffffff80 0x5 0x21 0x0 0x1 0x0 0x1 */
@@ -81,17 +118,10 @@
 		unsigned char seq_end[] = { 0x00, 0x00, 0x01, 0xB7 };
 		unsigned char iframe[s.st_size];
 		unsigned char stuffing[8192];
+			
 		memset(stuffing, 0, 8192);
 		read(f, iframe, s.st_size);
-
-		if(iframe[0] == 0x00 && iframe[1] == 0x00 && iframe[2] == 0x00 && iframe[3] == 0x01 && (iframe[4] & 0x0f) == 0x07)
-			ioctl(fd, VIDEO_SET_STREAMTYPE, 1); // set to mpeg4
-		else
-			ioctl(fd, VIDEO_SET_STREAMTYPE, 0); // set to mpeg2
-		c(ioctl(fd, VIDEO_SELECT_SOURCE, VIDEO_SOURCE_MEMORY));
-		c(ioctl(fd, VIDEO_PLAY));
-		c(ioctl(fd, VIDEO_CONTINUE));
-		c(ioctl(fd, VIDEO_CLEAR_BUFFER));
+				
 		while(pos <= (s.st_size-4) && !(seq_end_avail = (!iframe[pos] && !iframe[pos+1] && iframe[pos+2] == 1 && iframe[pos+3] == 0xB7)))
 			++pos;
 		while(count--){
@@ -109,10 +139,16 @@
 		if (!seq_end_avail)
 			write_all(fd, seq_end, sizeof(seq_end));
 		write_all(fd, stuffing, 8192);
-		usleep(150000);
-		c(ioctl(fd, VIDEO_STOP, 0));
-		c(ioctl(fd, VIDEO_SELECT_SOURCE, VIDEO_SOURCE_DEMUX));
+		
+		do {
+			ret = codec_get_vbuf_state(pcodec, &vbuf);
+			if (ret != 0) 				
+				goto error;		
+		} while (vbuf.data_len > 0x100);   
+		usleep(200000);
 	}
+error:
+	codec_close(vpcodec);
 	return 0;
 }
 
