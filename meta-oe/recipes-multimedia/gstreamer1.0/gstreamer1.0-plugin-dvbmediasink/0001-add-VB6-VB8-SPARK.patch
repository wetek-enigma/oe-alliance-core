From 9f2227e9e5018ef0f088742ff405ff5bc61863a3 Mon Sep 17 00:00:00 2001
From: Captain <captain.onboard@web.de>
Date: Thu, 24 Sep 2015 18:57:32 +0200
Subject: [PATCH] -add-VB6-VB8-SPARK

---
 configure.ac      | 21 +++++++++++++++++++++
 gstdvbvideosink.c | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 gstdvbvideosink.h | 12 +++++++++---
 3 files changed, 77 insertions(+), 3 deletions(-)

diff --git a/configure.ac b/configure.ac
index 90f2987..8e5f045 100644
--- a/configure.ac
+++ b/configure.ac
@@ -222,6 +222,27 @@ if test "$have_eac3" = "yes"; then
 	AC_DEFINE([HAVE_EAC3],[1],[Define to 1 for E-AC3 support])
 fi
 
+AC_ARG_WITH(vb6,
+	AS_HELP_STRING([--with-vb6],[support VP6 , yes or no]),
+	[have_vb6=$withval],[have_vb6=no])
+if test "$have_vb6" = "yes"; then
+	AC_DEFINE([HAVE_VB6],[1],[Define to 1 for VB6 support])
+fi
+
+AC_ARG_WITH(vb8,
+	AS_HELP_STRING([--with-vb8],[support VP8 , yes or no]),
+	[have_vb8=$withval],[have_vb8=no])
+if test "$have_vb8" = "yes"; then
+	AC_DEFINE([HAVE_VB8],[1],[Define to 1 for VB8 support])
+fi
+
+AC_ARG_WITH(spark,
+	AS_HELP_STRING([--with-spark],[support SPARK , yes or no]),
+	[have_spark=$withval],[have_spark=no])
+if test "$have_spark" = "yes"; then
+	AC_DEFINE([HAVE_SPARK],[1],[Define to 1 for SPARK support])
+fi
+
 AC_ARG_WITH(dtsdownmix,
 	AS_HELP_STRING([--with-dtsdownmix],[build dts downmix element, yes or no]),
 	[have_dtsdownmix=$withval],[have_dtsdownmix=no])
diff --git a/gstdvbvideosink.c b/gstdvbvideosink.c
index 5d2c7b8..3e6952e 100644
--- a/gstdvbvideosink.c
+++ b/gstdvbvideosink.c
@@ -235,6 +235,20 @@ GST_STATIC_PAD_TEMPLATE (
 	"video/x-wmv, "
 		VIDEO_CAPS ", wmvversion = (int) 3; "
 #endif
+#ifdef HAVE_SPARK
+	"video/x-flash-video, "
+		VIDEO_CAPS "; "
+#endif
+#ifdef HAVE_VB6
+	"video/x-vp6, "
+		VIDEO_CAPS "; "
+	"video/x-vp6-flash, "
+		VIDEO_CAPS "; "
+#endif
+#ifdef HAVE_VB8
+	"video/x-vp8, "
+		VIDEO_CAPS "; "
+#endif
 	"video/mpegts, systemstream=(boolean)true, "
 		VIDEO_CAPS "; "
 	)
@@ -998,6 +1012,21 @@ static GstFlowReturn gst_dvbvideosink_render(GstBaseSink *sink, GstBuffer *buffe
 				}
 			}
 		}
+		else if (self->codec_type == CT_VP8 || self->codec_type == CT_VP6 || self->codec_type == CT_SPARK) {
+			uint32_t len = data_len + 4 + 6;
+			memcpy(pes_header+pes_header_len, "BCMV", 4);
+			pes_header_len += 4;
+			if (self->codec_type == CT_VP6)
+				++len;
+			pes_header[pes_header_len++] = (len & 0xFF000000) >> 24;
+			pes_header[pes_header_len++] = (len & 0x00FF0000) >> 16;
+			pes_header[pes_header_len++] = (len & 0x0000FF00) >> 8;
+			pes_header[pes_header_len++] = (len & 0x000000FF) >> 0;
+			pes_header[pes_header_len++] = 0;
+			pes_header[pes_header_len++] = 0;
+			if (self->codec_type == CT_VP6)
+				pes_header[pes_header_len++] = 0;
+		}
 	}
 
 #ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
@@ -1641,6 +1670,24 @@ static gboolean gst_dvbvideosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 			GST_INFO_OBJECT (self, "MIMETYPE video/x-wmv %s -> STREAMTYPE_VC1_SM", value);
 		}
 	}
+	else if (!strcmp (mimetype, "video/x-vp6") || !strcmp (mimetype, "video/x-vp6-flash"))
+	{
+		self->stream_type = STREAMTYPE_VB6;
+		self->codec_type = CT_VP6;
+		GST_INFO_OBJECT (self, "MIMETYPE %s -> VIDEO_SET_STREAMTYPE, STREAMTYPE_VB6", mimetype);
+	}
+	else if (!strcmp (mimetype, "video/x-vp8"))
+	{
+		self->stream_type = STREAMTYPE_VB8;
+		self->codec_type = CT_VP8;
+		GST_INFO_OBJECT (self, "MIMETYPE video/x-vp8 -> VIDEO_SET_STREAMTYPE, STREAMTYPE_VB8");
+	}
+	else if (!strcmp (mimetype, "video/x-flash-video"))
+	{
+		self->stream_type = STREAMTYPE_SPARK;
+		self->codec_type = CT_SPARK;
+		GST_INFO_OBJECT (self, "MIMETYPE video/x-flash-video -> VIDEO_SET_STREAMTYPE, STREAMTYPE_SPARK");
+	}
 
 	if (self->stream_type != STREAMTYPE_UNKNOWN)
 	{
diff --git a/gstdvbvideosink.h b/gstdvbvideosink.h
index a20ef17..5bb9315 100644
--- a/gstdvbvideosink.h
+++ b/gstdvbvideosink.h
@@ -65,7 +65,7 @@ typedef struct _GstDVBVideoSink		GstDVBVideoSink;
 typedef struct _GstDVBVideoSinkClass	GstDVBVideoSinkClass;
 typedef struct _GstDVBVideoSinkPrivate	GstDVBVideoSinkPrivate;
 
-typedef enum { CT_MPEG1, CT_MPEG2, CT_H264, CT_DIVX311, CT_DIVX4, CT_MPEG4_PART2, CT_VC1, CT_VC1_SM, CT_H265 } t_codec_type;
+typedef enum { CT_MPEG1, CT_MPEG2, CT_H264, CT_DIVX311, CT_DIVX4, CT_MPEG4_PART2, CT_VC1, CT_VC1_SM, CT_H265, CT_SPARK, CT_VP6, CT_VP8} t_codec_type;
 #if defined(DREAMBOX)
 typedef enum {
 	STREAMTYPE_UNKNOWN = -1,
@@ -80,7 +80,10 @@ typedef enum {
 	STREAMTYPE_DIVX4 = 14,
 	STREAMTYPE_DIVX5 = 15,
 	STREAMTYPE_VC1 = 16,
-	STREAMTYPE_VC1_SM = 17
+	STREAMTYPE_VC1_SM = 17,
+	STREAMTYPE_VB6 = 18,
+	STREAMTYPE_VB8 = 20,
+	STREAMTYPE_SPARK = 21
 } t_stream_type;
 #else
 typedef enum {
@@ -96,7 +99,10 @@ typedef enum {
 	STREAMTYPE_XVID = 10,
 	STREAMTYPE_DIVX311 = 13,
 	STREAMTYPE_DIVX4 = 14,
-	STREAMTYPE_DIVX5 = 15
+	STREAMTYPE_DIVX5 = 15,
+	STREAMTYPE_VB6 = 18,
+	STREAMTYPE_VB8 = 20,
+	STREAMTYPE_SPARK = 21
 } t_stream_type;
 #endif
 
-- 
1.9.5.msysgit.0

